ok: CLASS ..Core : 


===== Header: /Users/Melancardie/Dropbox/Documents/code/Java/OwlExpress/lib/opencv-3.0.0-beta/modules/core/include/opencv2/core/base.hpp =====
Namespaces: set(['cv.ogl', 'cv.cudev', 'cv.ipp', 'cv.Error', 'cv.cuda', 'cv'])

--- Incoming ---
['const cv.Error.StsOk', '0', [], []]
ok: CONST StsOk=0

--- Incoming ---
['const cv.Error.StsBackTrace', '-1', [], []]
ok: CONST StsBackTrace=-1

--- Incoming ---
['const cv.Error.StsError', '-2', [], []]
ok: CONST StsError=-2

--- Incoming ---
['const cv.Error.StsInternal', '-3', [], []]
ok: CONST StsInternal=-3

--- Incoming ---
['const cv.Error.StsNoMem', '-4', [], []]
ok: CONST StsNoMem=-4

--- Incoming ---
['const cv.Error.StsBadArg', '-5', [], []]
ok: CONST StsBadArg=-5

--- Incoming ---
['const cv.Error.StsBadFunc', '-6', [], []]
ok: CONST StsBadFunc=-6

--- Incoming ---
['const cv.Error.StsNoConv', '-7', [], []]
ok: CONST StsNoConv=-7

--- Incoming ---
['const cv.Error.StsAutoTrace', '-8', [], []]
ok: CONST StsAutoTrace=-8

--- Incoming ---
['const cv.Error.HeaderIsNull', '-9', [], []]
ok: CONST HeaderIsNull=-9

--- Incoming ---
['const cv.Error.BadImageSize', '-10', [], []]
ok: CONST BadImageSize=-10

--- Incoming ---
['const cv.Error.BadOffset', '-11', [], []]
ok: CONST BadOffset=-11

--- Incoming ---
['const cv.Error.BadDataPtr', '-12', [], []]
ok: CONST BadDataPtr=-12

--- Incoming ---
['const cv.Error.BadStep', '-13', [], []]
ok: CONST BadStep=-13

--- Incoming ---
['const cv.Error.BadModelOrChSeq', '-14', [], []]
ok: CONST BadModelOrChSeq=-14

--- Incoming ---
['const cv.Error.BadNumChannels', '-15', [], []]
ok: CONST BadNumChannels=-15

--- Incoming ---
['const cv.Error.BadNumChannel1U', '-16', [], []]
ok: CONST BadNumChannel1U=-16

--- Incoming ---
['const cv.Error.BadDepth', '-17', [], []]
ok: CONST BadDepth=-17

--- Incoming ---
['const cv.Error.BadAlphaChannel', '-18', [], []]
ok: CONST BadAlphaChannel=-18

--- Incoming ---
['const cv.Error.BadOrder', '-19', [], []]
ok: CONST BadOrder=-19

--- Incoming ---
['const cv.Error.BadOrigin', '-20', [], []]
ok: CONST BadOrigin=-20

--- Incoming ---
['const cv.Error.BadAlign', '-21', [], []]
ok: CONST BadAlign=-21

--- Incoming ---
['const cv.Error.BadCallBack', '-22', [], []]
ok: CONST BadCallBack=-22

--- Incoming ---
['const cv.Error.BadTileSize', '-23', [], []]
ok: CONST BadTileSize=-23

--- Incoming ---
['const cv.Error.BadCOI', '-24', [], []]
ok: CONST BadCOI=-24

--- Incoming ---
['const cv.Error.BadROISize', '-25', [], []]
ok: CONST BadROISize=-25

--- Incoming ---
['const cv.Error.MaskIsTiled', '-26', [], []]
ok: CONST MaskIsTiled=-26

--- Incoming ---
['const cv.Error.StsNullPtr', '-27', [], []]
ok: CONST StsNullPtr=-27

--- Incoming ---
['const cv.Error.StsVecLengthErr', '-28', [], []]
ok: CONST StsVecLengthErr=-28

--- Incoming ---
['const cv.Error.StsFilterStructContentErr', '-29', [], []]
ok: CONST StsFilterStructContentErr=-29

--- Incoming ---
['const cv.Error.StsKernelStructContentErr', '-30', [], []]
ok: CONST StsKernelStructContentErr=-30

--- Incoming ---
['const cv.Error.StsFilterOffsetErr', '-31', [], []]
ok: CONST StsFilterOffsetErr=-31

--- Incoming ---
['const cv.Error.StsBadSize', '-201', [], []]
ok: CONST StsBadSize=-201

--- Incoming ---
['const cv.Error.StsDivByZero', '-202', [], []]
ok: CONST StsDivByZero=-202

--- Incoming ---
['const cv.Error.StsInplaceNotSupported', '-203', [], []]
ok: CONST StsInplaceNotSupported=-203

--- Incoming ---
['const cv.Error.StsObjectNotFound', '-204', [], []]
ok: CONST StsObjectNotFound=-204

--- Incoming ---
['const cv.Error.StsUnmatchedFormats', '-205', [], []]
ok: CONST StsUnmatchedFormats=-205

--- Incoming ---
['const cv.Error.StsBadFlag', '-206', [], []]
ok: CONST StsBadFlag=-206

--- Incoming ---
['const cv.Error.StsBadPoint', '-207', [], []]
ok: CONST StsBadPoint=-207

--- Incoming ---
['const cv.Error.StsBadMask', '-208', [], []]
ok: CONST StsBadMask=-208

--- Incoming ---
['const cv.Error.StsUnmatchedSizes', '-209', [], []]
ok: CONST StsUnmatchedSizes=-209

--- Incoming ---
['const cv.Error.StsUnsupportedFormat', '-210', [], []]
ok: CONST StsUnsupportedFormat=-210

--- Incoming ---
['const cv.Error.StsOutOfRange', '-211', [], []]
ok: CONST StsOutOfRange=-211

--- Incoming ---
['const cv.Error.StsParseError', '-212', [], []]
ok: CONST StsParseError=-212

--- Incoming ---
['const cv.Error.StsNotImplemented', '-213', [], []]
ok: CONST StsNotImplemented=-213

--- Incoming ---
['const cv.Error.StsBadMemBlock', '-214', [], []]
ok: CONST StsBadMemBlock=-214

--- Incoming ---
['const cv.Error.StsAssert', '-215', [], []]
ok: CONST StsAssert=-215

--- Incoming ---
['const cv.Error.GpuNotSupported', '-216', [], []]
ok: CONST GpuNotSupported=-216

--- Incoming ---
['const cv.Error.GpuApiCallError', '-217', [], []]
ok: CONST GpuApiCallError=-217

--- Incoming ---
['const cv.Error.OpenGlNotSupported', '-218', [], []]
ok: CONST OpenGlNotSupported=-218

--- Incoming ---
['const cv.Error.OpenGlApiCallError', '-219', [], []]
ok: CONST OpenGlApiCallError=-219

--- Incoming ---
['const cv.Error.OpenCLApiCallError', '-220', [], []]
ok: CONST OpenCLApiCallError=-220

--- Incoming ---
['const cv.Error.OpenCLDoubleNotSupported', '-221', [], []]
ok: CONST OpenCLDoubleNotSupported=-221

--- Incoming ---
['const cv.Error.OpenCLInitError', '-222', [], []]
ok: CONST OpenCLInitError=-222

--- Incoming ---
['const cv.Error.OpenCLNoAMDBlasFft', '-223', [], []]
ok: CONST OpenCLNoAMDBlasFft=-223

--- Incoming ---
['const cv.DECOMP_LU', '0', [], []]
ok: CONST DECOMP_LU=0

--- Incoming ---
['const cv.DECOMP_SVD', '1', [], []]
ok: CONST DECOMP_SVD=1

--- Incoming ---
['const cv.DECOMP_EIG', '2', [], []]
ok: CONST DECOMP_EIG=2

--- Incoming ---
['const cv.DECOMP_CHOLESKY', '3', [], []]
ok: CONST DECOMP_CHOLESKY=3

--- Incoming ---
['const cv.DECOMP_QR', '4', [], []]
ok: CONST DECOMP_QR=4

--- Incoming ---
['const cv.DECOMP_NORMAL', '16', [], []]
ok: CONST DECOMP_NORMAL=16

--- Incoming ---
['const cv.NORM_INF', '1', [], []]
ok: CONST NORM_INF=1

--- Incoming ---
['const cv.NORM_L1', '2', [], []]
ok: CONST NORM_L1=2

--- Incoming ---
['const cv.NORM_L2', '4', [], []]
ok: CONST NORM_L2=4

--- Incoming ---
['const cv.NORM_L2SQR', '5', [], []]
ok: CONST NORM_L2SQR=5

--- Incoming ---
['const cv.NORM_HAMMING', '6', [], []]
ok: CONST NORM_HAMMING=6

--- Incoming ---
['const cv.NORM_HAMMING2', '7', [], []]
ok: CONST NORM_HAMMING2=7

--- Incoming ---
['const cv.NORM_TYPE_MASK', '7', [], []]
ok: CONST NORM_TYPE_MASK=7

--- Incoming ---
['const cv.NORM_RELATIVE', '8', [], []]
ok: CONST NORM_RELATIVE=8

--- Incoming ---
['const cv.NORM_MINMAX', '32', [], []]
ok: CONST NORM_MINMAX=32

--- Incoming ---
['const cv.CMP_EQ', '0', [], []]
ok: CONST CMP_EQ=0

--- Incoming ---
['const cv.CMP_GT', '1', [], []]
ok: CONST CMP_GT=1

--- Incoming ---
['const cv.CMP_GE', '2', [], []]
ok: CONST CMP_GE=2

--- Incoming ---
['const cv.CMP_LT', '3', [], []]
ok: CONST CMP_LT=3

--- Incoming ---
['const cv.CMP_LE', '4', [], []]
ok: CONST CMP_LE=4

--- Incoming ---
['const cv.CMP_NE', '5', [], []]
ok: CONST CMP_NE=5

--- Incoming ---
['const cv.GEMM_1_T', '1', [], []]
ok: CONST GEMM_1_T=1

--- Incoming ---
['const cv.GEMM_2_T', '2', [], []]
ok: CONST GEMM_2_T=2

--- Incoming ---
['const cv.GEMM_3_T', '4', [], []]
ok: CONST GEMM_3_T=4

--- Incoming ---
['const cv.DFT_INVERSE', '1', [], []]
ok: CONST DFT_INVERSE=1

--- Incoming ---
['const cv.DFT_SCALE', '2', [], []]
ok: CONST DFT_SCALE=2

--- Incoming ---
['const cv.DFT_ROWS', '4', [], []]
ok: CONST DFT_ROWS=4

--- Incoming ---
['const cv.DFT_COMPLEX_OUTPUT', '16', [], []]
ok: CONST DFT_COMPLEX_OUTPUT=16

--- Incoming ---
['const cv.DFT_REAL_OUTPUT', '32', [], []]
ok: CONST DFT_REAL_OUTPUT=32

--- Incoming ---
['const cv.DCT_INVERSE', 'DFT_INVERSE', [], []]
ok: CONST DCT_INVERSE=DFT_INVERSE

--- Incoming ---
['const cv.DCT_ROWS', 'DFT_ROWS', [], []]
ok: CONST DCT_ROWS=DFT_ROWS

--- Incoming ---
['const cv.BORDER_CONSTANT', '0', [], []]
ok: CONST BORDER_CONSTANT=0

--- Incoming ---
['const cv.BORDER_REPLICATE', '1', [], []]
ok: CONST BORDER_REPLICATE=1

--- Incoming ---
['const cv.BORDER_REFLECT', '2', [], []]
ok: CONST BORDER_REFLECT=2

--- Incoming ---
['const cv.BORDER_WRAP', '3', [], []]
ok: CONST BORDER_WRAP=3

--- Incoming ---
['const cv.BORDER_REFLECT_101', '4', [], []]
ok: CONST BORDER_REFLECT_101=4

--- Incoming ---
['const cv.BORDER_TRANSPARENT', '5', [], []]
ok: CONST BORDER_TRANSPARENT=5

--- Incoming ---
['const cv.BORDER_REFLECT101', 'BORDER_REFLECT_101', [], []]
ok: CONST BORDER_REFLECT101=BORDER_REFLECT_101

--- Incoming ---
['const cv.BORDER_DEFAULT', 'BORDER_REFLECT_101', [], []]
ok: CONST BORDER_DEFAULT=BORDER_REFLECT_101

--- Incoming ---
['const cv.BORDER_ISOLATED', '16', [], []]
ok: CONST BORDER_ISOLATED=16

--- Incoming ---
['cv.cubeRoot', 'float', [], [['float', 'val', '', []]]]
ok: FUNC <float cv..cubeRoot [ARG float val=]>

--- Incoming ---
['cv.fastAtan2', 'float', [], [['float', 'y', '', []], ['float', 'x', '', []]]]
ok: FUNC <float cv..fastAtan2 [ARG float y=, ARG float x=]>


===== Header: /Users/Melancardie/Dropbox/Documents/code/Java/OwlExpress/lib/opencv-3.0.0-beta/modules/core/include/opencv2/core.hpp =====
Namespaces: set(['cv.ogl', 'cv.cudev', 'cv.ipp', 'cv.Error', 'cv.cuda', 'cv'])

--- Incoming ---
['const cv.SORT_EVERY_ROW', '0', [], []]
ok: CONST SORT_EVERY_ROW=0

--- Incoming ---
['const cv.SORT_EVERY_COLUMN', '1', [], []]
ok: CONST SORT_EVERY_COLUMN=1

--- Incoming ---
['const cv.SORT_ASCENDING', '0', [], []]
ok: CONST SORT_ASCENDING=0

--- Incoming ---
['const cv.SORT_DESCENDING', '16', [], []]
ok: CONST SORT_DESCENDING=16

--- Incoming ---
['const cv.COVAR_SCRAMBLED', '0', [], []]
ok: CONST COVAR_SCRAMBLED=0

--- Incoming ---
['const cv.COVAR_NORMAL', '1', [], []]
ok: CONST COVAR_NORMAL=1

--- Incoming ---
['const cv.COVAR_USE_AVG', '2', [], []]
ok: CONST COVAR_USE_AVG=2

--- Incoming ---
['const cv.COVAR_SCALE', '4', [], []]
ok: CONST COVAR_SCALE=4

--- Incoming ---
['const cv.COVAR_ROWS', '8', [], []]
ok: CONST COVAR_ROWS=8

--- Incoming ---
['const cv.COVAR_COLS', '16', [], []]
ok: CONST COVAR_COLS=16

--- Incoming ---
['const cv.KMEANS_RANDOM_CENTERS', '0', [], []]
ok: CONST KMEANS_RANDOM_CENTERS=0

--- Incoming ---
['const cv.KMEANS_PP_CENTERS', '2', [], []]
ok: CONST KMEANS_PP_CENTERS=2

--- Incoming ---
['const cv.KMEANS_USE_INITIAL_LABELS', '1', [], []]
ok: CONST KMEANS_USE_INITIAL_LABELS=1

--- Incoming ---
['const cv.FILLED', '-1', [], []]
manual: CONST FILLED=-1

--- Incoming ---
['const cv.LINE_4', '4', [], []]
ok: CONST LINE_4=4

--- Incoming ---
['const cv.LINE_8', '8', [], []]
ok: CONST LINE_8=8

--- Incoming ---
['const cv.LINE_AA', '16', [], []]
ok: CONST LINE_AA=16

--- Incoming ---
['const cv.FONT_HERSHEY_SIMPLEX', '0', [], []]
ok: CONST FONT_HERSHEY_SIMPLEX=0

--- Incoming ---
['const cv.FONT_HERSHEY_PLAIN', '1', [], []]
ok: CONST FONT_HERSHEY_PLAIN=1

--- Incoming ---
['const cv.FONT_HERSHEY_DUPLEX', '2', [], []]
ok: CONST FONT_HERSHEY_DUPLEX=2

--- Incoming ---
['const cv.FONT_HERSHEY_COMPLEX', '3', [], []]
ok: CONST FONT_HERSHEY_COMPLEX=3

--- Incoming ---
['const cv.FONT_HERSHEY_TRIPLEX', '4', [], []]
ok: CONST FONT_HERSHEY_TRIPLEX=4

--- Incoming ---
['const cv.FONT_HERSHEY_COMPLEX_SMALL', '5', [], []]
ok: CONST FONT_HERSHEY_COMPLEX_SMALL=5

--- Incoming ---
['const cv.FONT_HERSHEY_SCRIPT_SIMPLEX', '6', [], []]
ok: CONST FONT_HERSHEY_SCRIPT_SIMPLEX=6

--- Incoming ---
['const cv.FONT_HERSHEY_SCRIPT_COMPLEX', '7', [], []]
ok: CONST FONT_HERSHEY_SCRIPT_COMPLEX=7

--- Incoming ---
['const cv.FONT_ITALIC', '16', [], []]
ok: CONST FONT_ITALIC=16

--- Incoming ---
['const cv.REDUCE_SUM', '0', [], []]
manual: CONST REDUCE_SUM=0

--- Incoming ---
['const cv.REDUCE_AVG', '1', [], []]
manual: CONST REDUCE_AVG=1

--- Incoming ---
['const cv.REDUCE_MAX', '2', [], []]
manual: CONST REDUCE_MAX=2

--- Incoming ---
['const cv.REDUCE_MIN', '3', [], []]
manual: CONST REDUCE_MIN=3

--- Incoming ---
[   'cv.borderInterpolate',
    'int',
    [],
    [   ['int', 'p', '', []],
        ['int', 'len', '', []],
        ['int', 'borderType', '', []]]]
ok: FUNC <int cv..borderInterpolate [ARG int p=, ARG int len=, ARG int borderType=]>

--- Incoming ---
[   'cv.copyMakeBorder',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'top', '', []],
        ['int', 'bottom', '', []],
        ['int', 'left', '', []],
        ['int', 'right', '', []],
        ['int', 'borderType', '', []],
        ['Scalar', 'value', 'Scalar()', []]]]
ok: FUNC <void cv..copyMakeBorder [ARG Mat src=, ARG Mat dst=, ARG int top=, ARG int bottom=, ARG int left=, ARG int right=, ARG int borderType=, ARG Scalar value=Scalar()]>

--- Incoming ---
[   'cv.add',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'mask', 'Mat()', []],
        ['int', 'dtype', '-1', []]]]
ok: FUNC <void cv..add [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat(), ARG int dtype=-1]>

--- Incoming ---
[   'cv.subtract',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'mask', 'Mat()', []],
        ['int', 'dtype', '-1', []]]]
ok: FUNC <void cv..subtract [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat(), ARG int dtype=-1]>

--- Incoming ---
[   'cv.multiply',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['double', 'scale', '1', []],
        ['int', 'dtype', '-1', []]]]
ok: FUNC <void cv..multiply [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG double scale=1, ARG int dtype=-1]>

--- Incoming ---
[   'cv.divide',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['double', 'scale', '1', []],
        ['int', 'dtype', '-1', []]]]
ok: FUNC <void cv..divide [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG double scale=1, ARG int dtype=-1]>

--- Incoming ---
[   'cv.divide',
    'void',
    [],
    [   ['double', 'scale', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'dtype', '-1', []]]]
ok: FUNC <void cv..divide [ARG double scale=, ARG Mat src2=, ARG Mat dst=, ARG int dtype=-1]>

--- Incoming ---
[   'cv.scaleAdd',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['double', 'alpha', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']]]]
ok: FUNC <void cv..scaleAdd [ARG Mat src1=, ARG double alpha=, ARG Mat src2=, ARG Mat dst=]>

--- Incoming ---
[   'cv.addWeighted',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['double', 'alpha', '', []],
        ['Mat', 'src2', '', []],
        ['double', 'beta', '', []],
        ['double', 'gamma', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'dtype', '-1', []]]]
ok: FUNC <void cv..addWeighted [ARG Mat src1=, ARG double alpha=, ARG Mat src2=, ARG double beta=, ARG double gamma=, ARG Mat dst=, ARG int dtype=-1]>

--- Incoming ---
[   'cv.convertScaleAbs',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['double', 'alpha', '1', []],
        ['double', 'beta', '0', []]]]
ok: FUNC <void cv..convertScaleAbs [ARG Mat src=, ARG Mat dst=, ARG double alpha=1, ARG double beta=0]>

--- Incoming ---
[   'cv.LUT',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'lut', '', []],
        ['Mat', 'dst', '', ['/O']]]]
ok: FUNC <void cv..LUT [ARG Mat src=, ARG Mat lut=, ARG Mat dst=]>

--- Incoming ---
['cv.sum', 'Scalar', ['=sumElems'], [['Mat', 'src', '', []]]]
ok: FUNC <Scalar cv..sum [ARG Mat src=]>

--- Incoming ---
['cv.countNonZero', 'int', [], [['Mat', 'src', '', []]]]
ok: FUNC <int cv..countNonZero [ARG Mat src=]>

--- Incoming ---
[   'cv.findNonZero',
    'void',
    [],
    [['Mat', 'src', '', []], ['Mat', 'idx', '', ['/O']]]]
ok: FUNC <void cv..findNonZero [ARG Mat src=, ARG Mat idx=]>

--- Incoming ---
[   'cv.mean',
    'Scalar',
    [],
    [['Mat', 'src', '', []], ['Mat', 'mask', 'Mat()', []]]]
ok: FUNC <Scalar cv..mean [ARG Mat src=, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.meanStdDev',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'mean', '', ['/O']],
        ['Mat', 'stddev', '', ['/O']],
        ['Mat', 'mask', 'Mat()', []]]]
ok: FUNC <void cv..meanStdDev [ARG Mat src=, ARG vector_double mean=, ARG vector_double stddev=, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.norm',
    'double',
    [],
    [   ['Mat', 'src1', '', []],
        ['int', 'normType', 'NORM_L2', []],
        ['Mat', 'mask', 'Mat()', []]]]
ok: FUNC <double cv..norm [ARG Mat src1=, ARG int normType=NORM_L2, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.norm',
    'double',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['int', 'normType', 'NORM_L2', []],
        ['Mat', 'mask', 'Mat()', []]]]
ok: FUNC <double cv..norm [ARG Mat src1=, ARG Mat src2=, ARG int normType=NORM_L2, ARG Mat mask=Mat()]>

--- Incoming ---
['cv.PSNR', 'double', [], [['Mat', 'src1', '', []], ['Mat', 'src2', '', []]]]
ok: FUNC <double cv..PSNR [ARG Mat src1=, ARG Mat src2=]>

--- Incoming ---
[   'cv.batchDistance',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dist', '', ['/O']],
        ['int', 'dtype', '', []],
        ['Mat', 'nidx', '', ['/O']],
        ['int', 'normType', 'NORM_L2', []],
        ['int', 'K', '0', []],
        ['Mat', 'mask', 'Mat()', []],
        ['int', 'update', '0', []],
        ['bool', 'crosscheck', 'false', []]]]
ok: FUNC <void cv..batchDistance [ARG Mat src1=, ARG Mat src2=, ARG Mat dist=, ARG int dtype=, ARG Mat nidx=, ARG int normType=NORM_L2, ARG int K=0, ARG Mat mask=Mat(), ARG int update=0, ARG bool crosscheck=false]>

--- Incoming ---
[   'cv.normalize',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/IO']],
        ['double', 'alpha', '1', []],
        ['double', 'beta', '0', []],
        ['int', 'norm_type', 'NORM_L2', []],
        ['int', 'dtype', '-1', []],
        ['Mat', 'mask', 'Mat()', []]]]
ok: FUNC <void cv..normalize [ARG Mat src=, ARG Mat dst=, ARG double alpha=1, ARG double beta=0, ARG int norm_type=NORM_L2, ARG int dtype=-1, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.minMaxLoc',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['double*', 'minVal', '', ['/O']],
        ['double*', 'maxVal', '0', ['/O']],
        ['Point*', 'minLoc', '0', ['/O']],
        ['Point*', 'maxLoc', '0', ['/O']],
        ['Mat', 'mask', 'Mat()', []]]]
manual: FUNC <void cv..minMaxLoc [ARG Mat src=, ARG double * minVal=, ARG double * maxVal=0, ARG Point * minLoc=0, ARG Point * maxLoc=0, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.reduce',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'dim', '', []],
        ['int', 'rtype', '', []],
        ['int', 'dtype', '-1', []]]]
ok: FUNC <void cv..reduce [ARG Mat src=, ARG Mat dst=, ARG int dim=, ARG int rtype=, ARG int dtype=-1]>

--- Incoming ---
[   'cv.merge',
    'void',
    [],
    [['vector_Mat', 'mv', '', []], ['Mat', 'dst', '', ['/O']]]]
ok: FUNC <void cv..merge [ARG vector_Mat mv=, ARG Mat dst=]>

--- Incoming ---
[   'cv.split',
    'void',
    [],
    [['Mat', 'm', '', []], ['vector_Mat', 'mv', '', ['/O']]]]
ok: FUNC <void cv..split [ARG Mat m=, ARG vector_Mat mv=]>

--- Incoming ---
[   'cv.mixChannels',
    'void',
    [],
    [   ['vector_Mat', 'src', '', []],
        ['vector_Mat', 'dst', '', ['/IO']],
        ['vector_int', 'fromTo', '', []]]]
ok: FUNC <void cv..mixChannels [ARG vector_Mat src=, ARG vector_Mat dst=, ARG vector_int fromTo=]>

--- Incoming ---
[   'cv.extractChannel',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'coi', '', []]]]
ok: FUNC <void cv..extractChannel [ARG Mat src=, ARG Mat dst=, ARG int coi=]>

--- Incoming ---
[   'cv.insertChannel',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/IO']],
        ['int', 'coi', '', []]]]
ok: FUNC <void cv..insertChannel [ARG Mat src=, ARG Mat dst=, ARG int coi=]>

--- Incoming ---
[   'cv.flip',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'flipCode', '', []]]]
ok: FUNC <void cv..flip [ARG Mat src=, ARG Mat dst=, ARG int flipCode=]>

--- Incoming ---
[   'cv.repeat',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['int', 'ny', '', []],
        ['int', 'nx', '', []],
        ['Mat', 'dst', '', ['/O']]]]
ok: FUNC <void cv..repeat [ARG Mat src=, ARG int ny=, ARG int nx=, ARG Mat dst=]>

--- Incoming ---
[   'cv.hconcat',
    'void',
    [],
    [['vector_Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]]]
ok: FUNC <void cv..hconcat [ARG vector_Mat src=, ARG Mat dst=]>

--- Incoming ---
[   'cv.vconcat',
    'void',
    [],
    [['vector_Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]]]
ok: FUNC <void cv..vconcat [ARG vector_Mat src=, ARG Mat dst=]>

--- Incoming ---
[   'cv.bitwise_and',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'mask', 'Mat()', []]]]
ok: FUNC <void cv..bitwise_and [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.bitwise_or',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'mask', 'Mat()', []]]]
ok: FUNC <void cv..bitwise_or [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.bitwise_xor',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'mask', 'Mat()', []]]]
ok: FUNC <void cv..bitwise_xor [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.bitwise_not',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'mask', 'Mat()', []]]]
ok: FUNC <void cv..bitwise_not [ARG Mat src=, ARG Mat dst=, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.absdiff',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']]]]
ok: FUNC <void cv..absdiff [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=]>

--- Incoming ---
[   'cv.inRange',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'lowerb', '', []],
        ['Mat', 'upperb', '', []],
        ['Mat', 'dst', '', ['/O']]]]
ok: FUNC <void cv..inRange [ARG Mat src=, ARG Scalar lowerb=, ARG Scalar upperb=, ARG Mat dst=]>

--- Incoming ---
[   'cv.compare',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'cmpop', '', []]]]
ok: FUNC <void cv..compare [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG int cmpop=]>

--- Incoming ---
[   'cv.min',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']]]]
ok: FUNC <void cv..min [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=]>

--- Incoming ---
[   'cv.max',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']]]]
ok: FUNC <void cv..max [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=]>

--- Incoming ---
['cv.sqrt', 'void', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]]]
ok: FUNC <void cv..sqrt [ARG Mat src=, ARG Mat dst=]>

--- Incoming ---
[   'cv.pow',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['double', 'power', '', []],
        ['Mat', 'dst', '', ['/O']]]]
ok: FUNC <void cv..pow [ARG Mat src=, ARG double power=, ARG Mat dst=]>

--- Incoming ---
['cv.exp', 'void', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]]]
ok: FUNC <void cv..exp [ARG Mat src=, ARG Mat dst=]>

--- Incoming ---
['cv.log', 'void', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]]]
ok: FUNC <void cv..log [ARG Mat src=, ARG Mat dst=]>

--- Incoming ---
[   'cv.polarToCart',
    'void',
    [],
    [   ['Mat', 'magnitude', '', []],
        ['Mat', 'angle', '', []],
        ['Mat', 'x', '', ['/O']],
        ['Mat', 'y', '', ['/O']],
        ['bool', 'angleInDegrees', 'false', []]]]
ok: FUNC <void cv..polarToCart [ARG Mat magnitude=, ARG Mat angle=, ARG Mat x=, ARG Mat y=, ARG bool angleInDegrees=false]>

--- Incoming ---
[   'cv.cartToPolar',
    'void',
    [],
    [   ['Mat', 'x', '', []],
        ['Mat', 'y', '', []],
        ['Mat', 'magnitude', '', ['/O']],
        ['Mat', 'angle', '', ['/O']],
        ['bool', 'angleInDegrees', 'false', []]]]
ok: FUNC <void cv..cartToPolar [ARG Mat x=, ARG Mat y=, ARG Mat magnitude=, ARG Mat angle=, ARG bool angleInDegrees=false]>

--- Incoming ---
[   'cv.phase',
    'void',
    [],
    [   ['Mat', 'x', '', []],
        ['Mat', 'y', '', []],
        ['Mat', 'angle', '', ['/O']],
        ['bool', 'angleInDegrees', 'false', []]]]
ok: FUNC <void cv..phase [ARG Mat x=, ARG Mat y=, ARG Mat angle=, ARG bool angleInDegrees=false]>

--- Incoming ---
[   'cv.magnitude',
    'void',
    [],
    [   ['Mat', 'x', '', []],
        ['Mat', 'y', '', []],
        ['Mat', 'magnitude', '', ['/O']]]]
ok: FUNC <void cv..magnitude [ARG Mat x=, ARG Mat y=, ARG Mat magnitude=]>

--- Incoming ---
[   'cv.checkRange',
    'bool',
    [],
    [   ['Mat', 'a', '', []],
        ['bool', 'quiet', 'true', []],
        ['Point*', 'pos', '0', ['/O']],
        ['double', 'minVal', '-DBL_MAX', []],
        ['double', 'maxVal', 'DBL_MAX', []]]]
ok: FUNC <bool cv..checkRange [ARG Mat a=, ARG bool quiet=true, ARG  * pos=0, ARG double minVal=-DBL_MAX, ARG double maxVal=DBL_MAX]>

--- Incoming ---
[   'cv.patchNaNs',
    'void',
    [],
    [['Mat', 'a', '', ['/IO']], ['double', 'val', '0', []]]]
ok: FUNC <void cv..patchNaNs [ARG Mat a=, ARG double val=0]>

--- Incoming ---
[   'cv.gemm',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['double', 'alpha', '', []],
        ['Mat', 'src3', '', []],
        ['double', 'beta', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'flags', '0', []]]]
ok: FUNC <void cv..gemm [ARG Mat src1=, ARG Mat src2=, ARG double alpha=, ARG Mat src3=, ARG double beta=, ARG Mat dst=, ARG int flags=0]>

--- Incoming ---
[   'cv.mulTransposed',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['bool', 'aTa', '', []],
        ['Mat', 'delta', 'Mat()', []],
        ['double', 'scale', '1', []],
        ['int', 'dtype', '-1', []]]]
ok: FUNC <void cv..mulTransposed [ARG Mat src=, ARG Mat dst=, ARG bool aTa=, ARG Mat delta=Mat(), ARG double scale=1, ARG int dtype=-1]>

--- Incoming ---
[   'cv.transpose',
    'void',
    [],
    [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]]]
ok: FUNC <void cv..transpose [ARG Mat src=, ARG Mat dst=]>

--- Incoming ---
[   'cv.transform',
    'void',
    [],
    [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']], ['Mat', 'm', '', []]]]
ok: FUNC <void cv..transform [ARG Mat src=, ARG Mat dst=, ARG Mat m=]>

--- Incoming ---
[   'cv.perspectiveTransform',
    'void',
    [],
    [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']], ['Mat', 'm', '', []]]]
ok: FUNC <void cv..perspectiveTransform [ARG Mat src=, ARG Mat dst=, ARG Mat m=]>

--- Incoming ---
[   'cv.completeSymm',
    'void',
    [],
    [['Mat', 'mtx', '', ['/IO']], ['bool', 'lowerToUpper', 'false', []]]]
ok: FUNC <void cv..completeSymm [ARG Mat mtx=, ARG bool lowerToUpper=false]>

--- Incoming ---
[   'cv.setIdentity',
    'void',
    [],
    [['Mat', 'mtx', '', ['/IO']], ['Scalar', 's', 'Scalar(1)', []]]]
ok: FUNC <void cv..setIdentity [ARG Mat mtx=, ARG Scalar s=Scalar(1)]>

--- Incoming ---
['cv.determinant', 'double', [], [['Mat', 'mtx', '', []]]]
ok: FUNC <double cv..determinant [ARG Mat mtx=]>

--- Incoming ---
['cv.trace', 'Scalar', [], [['Mat', 'mtx', '', []]]]
ok: FUNC <Scalar cv..trace [ARG Mat mtx=]>

--- Incoming ---
[   'cv.invert',
    'double',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'flags', 'DECOMP_LU', []]]]
ok: FUNC <double cv..invert [ARG Mat src=, ARG Mat dst=, ARG int flags=DECOMP_LU]>

--- Incoming ---
[   'cv.solve',
    'bool',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'flags', 'DECOMP_LU', []]]]
ok: FUNC <bool cv..solve [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG int flags=DECOMP_LU]>

--- Incoming ---
[   'cv.sort',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'flags', '', []]]]
ok: FUNC <void cv..sort [ARG Mat src=, ARG Mat dst=, ARG int flags=]>

--- Incoming ---
[   'cv.sortIdx',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'flags', '', []]]]
ok: FUNC <void cv..sortIdx [ARG Mat src=, ARG Mat dst=, ARG int flags=]>

--- Incoming ---
[   'cv.solveCubic',
    'int',
    [],
    [['Mat', 'coeffs', '', []], ['Mat', 'roots', '', ['/O']]]]
ok: FUNC <int cv..solveCubic [ARG Mat coeffs=, ARG Mat roots=]>

--- Incoming ---
[   'cv.solvePoly',
    'double',
    [],
    [   ['Mat', 'coeffs', '', []],
        ['Mat', 'roots', '', ['/O']],
        ['int', 'maxIters', '300', []]]]
ok: FUNC <double cv..solvePoly [ARG Mat coeffs=, ARG Mat roots=, ARG int maxIters=300]>

--- Incoming ---
[   'cv.eigen',
    'bool',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'eigenvalues', '', ['/O']],
        ['Mat', 'eigenvectors', 'Mat()', ['/O']]]]
ok: FUNC <bool cv..eigen [ARG Mat src=, ARG Mat eigenvalues=, ARG Mat eigenvectors=Mat()]>

--- Incoming ---
[   'cv.calcCovarMatrix',
    'void',
    [],
    [   ['Mat', 'samples', '', []],
        ['Mat', 'covar', '', ['/O']],
        ['Mat', 'mean', '', ['/IO']],
        ['int', 'flags', '', []],
        ['int', 'ctype', 'CV_64F', []]]]
ok: FUNC <void cv..calcCovarMatrix [ARG Mat samples=, ARG Mat covar=, ARG Mat mean=, ARG int flags=, ARG int ctype=CV_64F]>

--- Incoming ---
[   'cv.PCACompute',
    'void',
    [],
    [   ['Mat', 'data', '', []],
        ['Mat', 'mean', '', ['/IO']],
        ['Mat', 'eigenvectors', '', ['/O']],
        ['int', 'maxComponents', '0', []]]]
ok: FUNC <void cv..PCACompute [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG int maxComponents=0]>

--- Incoming ---
[   'cv.PCACompute',
    'void',
    [],
    [   ['Mat', 'data', '', []],
        ['Mat', 'mean', '', ['/IO']],
        ['Mat', 'eigenvectors', '', ['/O']],
        ['double', 'retainedVariance', '', []]]]
ok: FUNC <void cv..PCACompute [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG double retainedVariance=]>

--- Incoming ---
[   'cv.PCAProject',
    'void',
    [],
    [   ['Mat', 'data', '', []],
        ['Mat', 'mean', '', []],
        ['Mat', 'eigenvectors', '', []],
        ['Mat', 'result', '', ['/O']]]]
ok: FUNC <void cv..PCAProject [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG Mat result=]>

--- Incoming ---
[   'cv.PCABackProject',
    'void',
    [],
    [   ['Mat', 'data', '', []],
        ['Mat', 'mean', '', []],
        ['Mat', 'eigenvectors', '', []],
        ['Mat', 'result', '', ['/O']]]]
ok: FUNC <void cv..PCABackProject [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG Mat result=]>

--- Incoming ---
[   'cv.SVDecomp',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'w', '', ['/O']],
        ['Mat', 'u', '', ['/O']],
        ['Mat', 'vt', '', ['/O']],
        ['int', 'flags', '0', []]]]
ok: FUNC <void cv..SVDecomp [ARG Mat src=, ARG Mat w=, ARG Mat u=, ARG Mat vt=, ARG int flags=0]>

--- Incoming ---
[   'cv.SVBackSubst',
    'void',
    [],
    [   ['Mat', 'w', '', []],
        ['Mat', 'u', '', []],
        ['Mat', 'vt', '', []],
        ['Mat', 'rhs', '', []],
        ['Mat', 'dst', '', ['/O']]]]
ok: FUNC <void cv..SVBackSubst [ARG Mat w=, ARG Mat u=, ARG Mat vt=, ARG Mat rhs=, ARG Mat dst=]>

--- Incoming ---
[   'cv.Mahalanobis',
    'double',
    [],
    [['Mat', 'v1', '', []], ['Mat', 'v2', '', []], ['Mat', 'icovar', '', []]]]
ok: FUNC <double cv..Mahalanobis [ARG Mat v1=, ARG Mat v2=, ARG Mat icovar=]>

--- Incoming ---
[   'cv.dft',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'flags', '0', []],
        ['int', 'nonzeroRows', '0', []]]]
ok: FUNC <void cv..dft [ARG Mat src=, ARG Mat dst=, ARG int flags=0, ARG int nonzeroRows=0]>

--- Incoming ---
[   'cv.idft',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'flags', '0', []],
        ['int', 'nonzeroRows', '0', []]]]
ok: FUNC <void cv..idft [ARG Mat src=, ARG Mat dst=, ARG int flags=0, ARG int nonzeroRows=0]>

--- Incoming ---
[   'cv.dct',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'flags', '0', []]]]
ok: FUNC <void cv..dct [ARG Mat src=, ARG Mat dst=, ARG int flags=0]>

--- Incoming ---
[   'cv.idct',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'flags', '0', []]]]
ok: FUNC <void cv..idct [ARG Mat src=, ARG Mat dst=, ARG int flags=0]>

--- Incoming ---
[   'cv.mulSpectrums',
    'void',
    [],
    [   ['Mat', 'a', '', []],
        ['Mat', 'b', '', []],
        ['Mat', 'c', '', ['/O']],
        ['int', 'flags', '', []],
        ['bool', 'conjB', 'false', []]]]
ok: FUNC <void cv..mulSpectrums [ARG Mat a=, ARG Mat b=, ARG Mat c=, ARG int flags=, ARG bool conjB=false]>

--- Incoming ---
['cv.getOptimalDFTSize', 'int', [], [['int', 'vecsize', '', []]]]
ok: FUNC <int cv..getOptimalDFTSize [ARG int vecsize=]>

--- Incoming ---
[   'cv.kmeans',
    'double',
    [],
    [   ['Mat', 'data', '', []],
        ['int', 'K', '', []],
        ['Mat', 'bestLabels', '', ['/IO']],
        ['TermCriteria', 'criteria', '', []],
        ['int', 'attempts', '', []],
        ['int', 'flags', '', []],
        ['Mat', 'centers', 'Mat()', ['/O']]]]
ok: FUNC <double cv..kmeans [ARG Mat data=, ARG int K=, ARG Mat bestLabels=, ARG TermCriteria criteria=, ARG int attempts=, ARG int flags=, ARG Mat centers=Mat()]>

--- Incoming ---
[   'cv.randu',
    'void',
    [],
    [   ['Mat', 'dst', '', ['/IO']],
        ['Mat', 'low', '', []],
        ['Mat', 'high', '', []]]]
ok: FUNC <void cv..randu [ARG Mat dst=, ARG double low=, ARG double high=]>

--- Incoming ---
[   'cv.randn',
    'void',
    [],
    [   ['Mat', 'dst', '', ['/IO']],
        ['Mat', 'mean', '', []],
        ['Mat', 'stddev', '', []]]]
ok: FUNC <void cv..randn [ARG Mat dst=, ARG double mean=, ARG double stddev=]>

--- Incoming ---
[   'cv.randShuffle',
    'void',
    [],
    [   ['Mat', 'dst', '', ['/IO']],
        ['double', 'iterFactor', '1.', []],
        ['RNG*', 'rng', '0', []]]]
ok: FUNC <void cv..randShuffle [ARG Mat dst=, ARG double iterFactor=1., ARG RNG * rng=0]>

--- Incoming ---
['const cv.PCA.DATA_AS_ROW', '0', [], []]
class not found: CONST DATA_AS_ROW=0

--- Incoming ---
['const cv.PCA.DATA_AS_COL', '1', [], []]
class not found: CONST DATA_AS_COL=1

--- Incoming ---
['const cv.PCA.USE_AVG', '2', [], []]
class not found: CONST USE_AVG=2

--- Incoming ---
['const cv.SVD.MODIFY_A', '1', [], []]
class not found: CONST MODIFY_A=1

--- Incoming ---
['const cv.SVD.NO_UV', '2', [], []]
class not found: CONST NO_UV=2

--- Incoming ---
['const cv.SVD.FULL_UV', '4', [], []]
class not found: CONST FULL_UV=4

--- Incoming ---
['const cv.RNG.UNIFORM', '0', [], []]
class not found: CONST UNIFORM=0

--- Incoming ---
['const cv.RNG.NORMAL', '1', [], []]
class not found: CONST NORMAL=1

--- Incoming ---
['const cv.Formatter.FMT_DEFAULT', '0', [], []]
class not found: CONST FMT_DEFAULT=0

--- Incoming ---
['const cv.Formatter.FMT_MATLAB', '1', [], []]
class not found: CONST FMT_MATLAB=1

--- Incoming ---
['const cv.Formatter.FMT_CSV', '2', [], []]
class not found: CONST FMT_CSV=2

--- Incoming ---
['const cv.Formatter.FMT_PYTHON', '3', [], []]
class not found: CONST FMT_PYTHON=3

--- Incoming ---
['const cv.Formatter.FMT_NUMPY', '4', [], []]
class not found: CONST FMT_NUMPY=4

--- Incoming ---
['const cv.Formatter.FMT_C', '5', [], []]
class not found: CONST FMT_C=5

--- Incoming ---
['class cv.Algorithm', '', [], []]
ok: CLASS cv..Algorithm : 

--- Incoming ---
['cv.Algorithm.getInt', 'int', [], [['String', 'name', '', []]]]
ok: FUNC <int cv.Algorithm.getInt [ARG String name=]>

--- Incoming ---
['cv.Algorithm.getDouble', 'double', [], [['String', 'name', '', []]]]
ok: FUNC <double cv.Algorithm.getDouble [ARG String name=]>

--- Incoming ---
['cv.Algorithm.getBool', 'bool', [], [['String', 'name', '', []]]]
ok: FUNC <bool cv.Algorithm.getBool [ARG String name=]>

--- Incoming ---
['cv.Algorithm.getString', 'String', [], [['String', 'name', '', []]]]
ok: FUNC <String cv.Algorithm.getString [ARG String name=]>

--- Incoming ---
['cv.Algorithm.getMat', 'Mat', [], [['String', 'name', '', []]]]
ok: FUNC <Mat cv.Algorithm.getMat [ARG String name=]>

--- Incoming ---
['cv.Algorithm.getMatVector', 'vector_Mat', [], [['String', 'name', '', []]]]
ok: FUNC <vector_Mat cv.Algorithm.getMatVector [ARG String name=]>

--- Incoming ---
[   'cv.Algorithm.getAlgorithm',
    'Ptr_Algorithm',
    [],
    [['String', 'name', '', []]]]
ok: FUNC <Ptr_Algorithm cv.Algorithm.getAlgorithm [ARG String name=]>

--- Incoming ---
[   'cv.Algorithm.setInt',
    'void',
    [],
    [['String', 'name', '', []], ['int', 'value', '', []]]]
ok: FUNC <void cv.Algorithm.setInt [ARG String name=, ARG int value=]>

--- Incoming ---
[   'cv.Algorithm.setDouble',
    'void',
    [],
    [['String', 'name', '', []], ['double', 'value', '', []]]]
ok: FUNC <void cv.Algorithm.setDouble [ARG String name=, ARG double value=]>

--- Incoming ---
[   'cv.Algorithm.setBool',
    'void',
    [],
    [['String', 'name', '', []], ['bool', 'value', '', []]]]
ok: FUNC <void cv.Algorithm.setBool [ARG String name=, ARG bool value=]>

--- Incoming ---
[   'cv.Algorithm.setString',
    'void',
    [],
    [['String', 'name', '', []], ['String', 'value', '', []]]]
ok: FUNC <void cv.Algorithm.setString [ARG String name=, ARG String value=]>

--- Incoming ---
[   'cv.Algorithm.setMat',
    'void',
    [],
    [['String', 'name', '', []], ['Mat', 'value', '', []]]]
ok: FUNC <void cv.Algorithm.setMat [ARG String name=, ARG Mat value=]>

--- Incoming ---
[   'cv.Algorithm.setMatVector',
    'void',
    [],
    [['String', 'name', '', []], ['vector_Mat', 'value', '', []]]]
ok: FUNC <void cv.Algorithm.setMatVector [ARG String name=, ARG vector_Mat value=]>

--- Incoming ---
[   'cv.Algorithm.setAlgorithm',
    'void',
    [],
    [['String', 'name', '', []], ['Ptr_Algorithm', 'value', '', []]]]
ok: FUNC <void cv.Algorithm.setAlgorithm [ARG String name=, ARG Ptr_Algorithm value=]>

--- Incoming ---
['cv.Algorithm.paramHelp', 'String', [], [['String', 'name', '', []]]]
ok: FUNC <String cv.Algorithm.paramHelp [ARG String name=]>

--- Incoming ---
['cv.Algorithm.paramType', 'int', [], [['String', 'name', '', []]]]
ok: FUNC <int cv.Algorithm.paramType [ARG String name=]>

--- Incoming ---
[   'cv.Algorithm.getParams',
    'void',
    [],
    [['vector_String', 'names', '', ['/O']]]]
ok: FUNC <void cv.Algorithm.getParams [ARG vector_String names=]>

--- Incoming ---
[   'cv.Algorithm.getList',
    'void',
    ['/S'],
    [['vector_String', 'algorithms', '', ['/O']]]]
ok: FUNC <void cv.Algorithm.getList [ARG vector_String algorithms=]>

--- Incoming ---
['cv.Algorithm._create', 'Ptr_Algorithm', ['/S'], [['String', 'name', '', []]]]
ok: FUNC <Ptr_Algorithm cv.Algorithm._create [ARG String name=]>

--- Incoming ---
['const cv.Param.INT', '0', [], []]
class not found: CONST INT=0

--- Incoming ---
['const cv.Param.BOOLEAN', '1', [], []]
class not found: CONST BOOLEAN=1

--- Incoming ---
['const cv.Param.REAL', '2', [], []]
class not found: CONST REAL=2

--- Incoming ---
['const cv.Param.STRING', '3', [], []]
class not found: CONST STRING=3

--- Incoming ---
['const cv.Param.MAT', '4', [], []]
class not found: CONST MAT=4

--- Incoming ---
['const cv.Param.MAT_VECTOR', '5', [], []]
class not found: CONST MAT_VECTOR=5

--- Incoming ---
['const cv.Param.ALGORITHM', '6', [], []]
class not found: CONST ALGORITHM=6

--- Incoming ---
['const cv.Param.FLOAT', '7', [], []]
class not found: CONST FLOAT=7

--- Incoming ---
['const cv.Param.UNSIGNED_INT', '8', [], []]
class not found: CONST UNSIGNED_INT=8

--- Incoming ---
['const cv.Param.UINT64', '9', [], []]
class not found: CONST UINT64=9

--- Incoming ---
['const cv.Param.UCHAR', '11', [], []]
class not found: CONST UCHAR=11


===== Header: /Users/Melancardie/Dropbox/Documents/code/Java/OwlExpress/lib/opencv-3.0.0-beta/modules/core/include/opencv2/core/utility.hpp =====
Namespaces: set(['cv.ogl', 'cv.cudev', 'cv.ipp', 'cv.Error', 'cv.cuda', 'cv'])

--- Incoming ---
['cv.getBuildInformation', 'String', [], []]
ok: FUNC <String cv..getBuildInformation []>

--- Incoming ---
['cv.getTickCount', 'int64', [], []]
ok: FUNC <int64 cv..getTickCount []>

--- Incoming ---
['cv.getTickFrequency', 'double', [], []]
ok: FUNC <double cv..getTickFrequency []>

--- Incoming ---
['cv.getCPUTickCount', 'int64', [], []]
ok: FUNC <int64 cv..getCPUTickCount []>

--- Incoming ---
['const cv.CPU_MMX', '1', [], []]
ok: CONST CPU_MMX=1

--- Incoming ---
['const cv.CPU_SSE', '2', [], []]
ok: CONST CPU_SSE=2

--- Incoming ---
['const cv.CPU_SSE2', '3', [], []]
ok: CONST CPU_SSE2=3

--- Incoming ---
['const cv.CPU_SSE3', '4', [], []]
ok: CONST CPU_SSE3=4

--- Incoming ---
['const cv.CPU_SSSE3', '5', [], []]
ok: CONST CPU_SSSE3=5

--- Incoming ---
['const cv.CPU_SSE4_1', '6', [], []]
ok: CONST CPU_SSE4_1=6

--- Incoming ---
['const cv.CPU_SSE4_2', '7', [], []]
ok: CONST CPU_SSE4_2=7

--- Incoming ---
['const cv.CPU_POPCNT', '8', [], []]
ok: CONST CPU_POPCNT=8

--- Incoming ---
['const cv.CPU_AVX', '10', [], []]
ok: CONST CPU_AVX=10

--- Incoming ---
['const cv.CPU_NEON', '11', [], []]
ok: CONST CPU_NEON=11

--- Incoming ---
['cv.checkHardwareSupport', 'bool', [], [['int', 'feature', '', []]]]
manual: FUNC <bool cv..checkHardwareSupport [ARG int feature=]>

--- Incoming ---
['cv.getNumberOfCPUs', 'int', [], []]
ok: FUNC <int cv..getNumberOfCPUs []>

--- Incoming ---
['cv.setUseOptimized', 'void', [], [['bool', 'onoff', '', []]]]
manual: FUNC <void cv..setUseOptimized [ARG bool onoff=]>

--- Incoming ---
['cv.useOptimized', 'bool', [], []]
manual: FUNC <bool cv..useOptimized []>


===== Header: /Users/Melancardie/Dropbox/Documents/code/Java/OwlExpress/lib/opencv-3.0.0-beta/modules/core/../java/generator/src/cpp/core_manual.hpp =====
Namespaces: set(['cv.ogl', 'cv.cudev', 'cv.ipp', 'cv.Error', 'cv.cuda', 'cv'])

--- Incoming ---
['cv.setErrorVerbosity', 'void', [], [['bool', 'verbose', '', []]]]
ok: FUNC <void cv..setErrorVerbosity [ARG bool verbose=]>

--- Incoming ---
[   'cv.add',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Scalar', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'mask', 'Mat()', []],
        ['int', 'dtype', '-1', []]]]
ok: FUNC <void cv..add [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=, ARG Mat mask=Mat(), ARG int dtype=-1]>

--- Incoming ---
[   'cv.subtract',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Scalar', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'mask', 'Mat()', []],
        ['int', 'dtype', '-1', []]]]
ok: FUNC <void cv..subtract [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=, ARG Mat mask=Mat(), ARG int dtype=-1]>

--- Incoming ---
[   'cv.multiply',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Scalar', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['double', 'scale', '1', []],
        ['int', 'dtype', '-1', []]]]
ok: FUNC <void cv..multiply [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=, ARG double scale=1, ARG int dtype=-1]>

--- Incoming ---
[   'cv.divide',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Scalar', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['double', 'scale', '1', []],
        ['int', 'dtype', '-1', []]]]
ok: FUNC <void cv..divide [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=, ARG double scale=1, ARG int dtype=-1]>

--- Incoming ---
[   'cv.absdiff',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Scalar', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']]]]
ok: FUNC <void cv..absdiff [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=]>

--- Incoming ---
[   'cv.compare',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Scalar', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'cmpop', '', []]]]
ok: FUNC <void cv..compare [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=, ARG int cmpop=]>

--- Incoming ---
[   'cv.min',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Scalar', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']]]]
ok: FUNC <void cv..min [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=]>

--- Incoming ---
[   'cv.max',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Scalar', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']]]]
ok: FUNC <void cv..max [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=]>


===== Generating... =====
CLASS ..Core : 
[CONST CV_8U=0(manual), CONST CV_8S=1(manual), CONST CV_16U=2(manual), CONST CV_16S=3(manual), CONST CV_32S=4(manual), CONST CV_32F=5(manual), CONST CV_64F=6(manual), CONST CV_USRTYPE1=7(manual)]
[CONST SVD_MODIFY_A=1(manual), CONST SVD_NO_UV=2(manual), CONST SVD_FULL_UV=4(manual), CONST FILLED=-1(manual), CONST REDUCE_SUM=0(manual), CONST REDUCE_AVG=1(manual), CONST REDUCE_MAX=2(manual), CONST REDUCE_MIN=3(manual), CONST StsOk=0, CONST StsBackTrace=-1, CONST StsError=-2, CONST StsInternal=-3, CONST StsNoMem=-4, CONST StsBadArg=-5, CONST StsBadFunc=-6, CONST StsNoConv=-7, CONST StsAutoTrace=-8, CONST HeaderIsNull=-9, CONST BadImageSize=-10, CONST BadOffset=-11, CONST BadDataPtr=-12, CONST BadStep=-13, CONST BadModelOrChSeq=-14, CONST BadNumChannels=-15, CONST BadNumChannel1U=-16, CONST BadDepth=-17, CONST BadAlphaChannel=-18, CONST BadOrder=-19, CONST BadOrigin=-20, CONST BadAlign=-21, CONST BadCallBack=-22, CONST BadTileSize=-23, CONST BadCOI=-24, CONST BadROISize=-25, CONST MaskIsTiled=-26, CONST StsNullPtr=-27, CONST StsVecLengthErr=-28, CONST StsFilterStructContentErr=-29, CONST StsKernelStructContentErr=-30, CONST StsFilterOffsetErr=-31, CONST StsBadSize=-201, CONST StsDivByZero=-202, CONST StsInplaceNotSupported=-203, CONST StsObjectNotFound=-204, CONST StsUnmatchedFormats=-205, CONST StsBadFlag=-206, CONST StsBadPoint=-207, CONST StsBadMask=-208, CONST StsUnmatchedSizes=-209, CONST StsUnsupportedFormat=-210, CONST StsOutOfRange=-211, CONST StsParseError=-212, CONST StsNotImplemented=-213, CONST StsBadMemBlock=-214, CONST StsAssert=-215, CONST GpuNotSupported=-216, CONST GpuApiCallError=-217, CONST OpenGlNotSupported=-218, CONST OpenGlApiCallError=-219, CONST OpenCLApiCallError=-220, CONST OpenCLDoubleNotSupported=-221, CONST OpenCLInitError=-222, CONST OpenCLNoAMDBlasFft=-223, CONST DECOMP_LU=0, CONST DECOMP_SVD=1, CONST DECOMP_EIG=2, CONST DECOMP_CHOLESKY=3, CONST DECOMP_QR=4, CONST DECOMP_NORMAL=16, CONST NORM_INF=1, CONST NORM_L1=2, CONST NORM_L2=4, CONST NORM_L2SQR=5, CONST NORM_HAMMING=6, CONST NORM_HAMMING2=7, CONST NORM_TYPE_MASK=7, CONST NORM_RELATIVE=8, CONST NORM_MINMAX=32, CONST CMP_EQ=0, CONST CMP_GT=1, CONST CMP_GE=2, CONST CMP_LT=3, CONST CMP_LE=4, CONST CMP_NE=5, CONST GEMM_1_T=1, CONST GEMM_2_T=2, CONST GEMM_3_T=4, CONST DFT_INVERSE=1, CONST DFT_SCALE=2, CONST DFT_ROWS=4, CONST DFT_COMPLEX_OUTPUT=16, CONST DFT_REAL_OUTPUT=32, CONST DCT_INVERSE=DFT_INVERSE, CONST DCT_ROWS=DFT_ROWS, CONST BORDER_CONSTANT=0, CONST BORDER_REPLICATE=1, CONST BORDER_REFLECT=2, CONST BORDER_WRAP=3, CONST BORDER_REFLECT_101=4, CONST BORDER_TRANSPARENT=5, CONST BORDER_REFLECT101=BORDER_REFLECT_101, CONST BORDER_DEFAULT=BORDER_REFLECT_101, CONST BORDER_ISOLATED=16, CONST SORT_EVERY_ROW=0, CONST SORT_EVERY_COLUMN=1, CONST SORT_ASCENDING=0, CONST SORT_DESCENDING=16, CONST COVAR_SCRAMBLED=0, CONST COVAR_NORMAL=1, CONST COVAR_USE_AVG=2, CONST COVAR_SCALE=4, CONST COVAR_ROWS=8, CONST COVAR_COLS=16, CONST KMEANS_RANDOM_CENTERS=0, CONST KMEANS_PP_CENTERS=2, CONST KMEANS_USE_INITIAL_LABELS=1, CONST LINE_4=4, CONST LINE_8=8, CONST LINE_AA=16, CONST FONT_HERSHEY_SIMPLEX=0, CONST FONT_HERSHEY_PLAIN=1, CONST FONT_HERSHEY_DUPLEX=2, CONST FONT_HERSHEY_COMPLEX=3, CONST FONT_HERSHEY_TRIPLEX=4, CONST FONT_HERSHEY_COMPLEX_SMALL=5, CONST FONT_HERSHEY_SCRIPT_SIMPLEX=6, CONST FONT_HERSHEY_SCRIPT_COMPLEX=7, CONST FONT_ITALIC=16, CONST CPU_MMX=1, CONST CPU_SSE=2, CONST CPU_SSE2=3, CONST CPU_SSE3=4, CONST CPU_SSSE3=5, CONST CPU_SSE4_1=6, CONST CPU_SSE4_2=7, CONST CPU_POPCNT=8, CONST CPU_AVX=10, CONST CPU_NEON=11]
FUNC <int cv..borderInterpolate [ARG int p=, ARG int len=, ARG int borderType=]>
FUNC <void cv..copyMakeBorder [ARG Mat src=, ARG Mat dst=, ARG int top=, ARG int bottom=, ARG int left=, ARG int right=, ARG int borderType=, ARG Scalar value=Scalar()]>
FUNC <void cv..subtract [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=, ARG Mat mask=Mat(), ARG int dtype=-1]>
FUNC <void cv..divide [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=, ARG double scale=1, ARG int dtype=-1]>
FUNC <void cv..multiply [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=, ARG double scale=1, ARG int dtype=-1]>
FUNC <void cv..absdiff [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=]>
FUNC <void cv..compare [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=, ARG int cmpop=]>
FUNC <void cv..max [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=]>
FUNC <void cv..min [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=]>
FUNC <int64 cv..getTickCount []>
FUNC <double cv..getTickFrequency []>
FUNC <String cv..getBuildInformation []>
FUNC <double cv..PSNR [ARG Mat src1=, ARG Mat src2=]>
FUNC <void cv..batchDistance [ARG Mat src1=, ARG Mat src2=, ARG Mat dist=, ARG int dtype=, ARG Mat nidx=, ARG int normType=NORM_L2, ARG int K=0, ARG Mat mask=Mat(), ARG int update=0, ARG bool crosscheck=false]>
FUNC <void cv..normalize [ARG Mat src=, ARG Mat dst=, ARG double alpha=1, ARG double beta=0, ARG int norm_type=NORM_L2, ARG int dtype=-1, ARG Mat mask=Mat()]>
FUNC <void cv..reduce [ARG Mat src=, ARG Mat dst=, ARG int dim=, ARG int rtype=, ARG int dtype=-1]>
FUNC <void cv..merge [ARG vector_Mat mv=, ARG Mat dst=]>
FUNC <void cv..split [ARG Mat m=, ARG vector_Mat mv=]>
FUNC <void cv..mixChannels [ARG vector_Mat src=, ARG vector_Mat dst=, ARG vector_int fromTo=]>
FUNC <void cv..extractChannel [ARG Mat src=, ARG Mat dst=, ARG int coi=]>
FUNC <void cv..insertChannel [ARG Mat src=, ARG Mat dst=, ARG int coi=]>
FUNC <void cv..flip [ARG Mat src=, ARG Mat dst=, ARG int flipCode=]>
FUNC <void cv..repeat [ARG Mat src=, ARG int ny=, ARG int nx=, ARG Mat dst=]>
FUNC <void cv..perspectiveTransform [ARG Mat src=, ARG Mat dst=, ARG Mat m=]>
FUNC <void cv..completeSymm [ARG Mat mtx=, ARG bool lowerToUpper=false]>
FUNC <void cv..setIdentity [ARG Mat mtx=, ARG Scalar s=Scalar(1)]>
FUNC <double cv..determinant [ARG Mat mtx=]>
FUNC <Scalar cv..trace [ARG Mat mtx=]>
FUNC <double cv..invert [ARG Mat src=, ARG Mat dst=, ARG int flags=DECOMP_LU]>
FUNC <bool cv..solve [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG int flags=DECOMP_LU]>
FUNC <void cv..sort [ARG Mat src=, ARG Mat dst=, ARG int flags=]>
FUNC <void cv..sortIdx [ARG Mat src=, ARG Mat dst=, ARG int flags=]>
FUNC <int cv..solveCubic [ARG Mat coeffs=, ARG Mat roots=]>
FUNC <double cv..solvePoly [ARG Mat coeffs=, ARG Mat roots=, ARG int maxIters=300]>
FUNC <bool cv..eigen [ARG Mat src=, ARG Mat eigenvalues=, ARG Mat eigenvectors=Mat()]>
FUNC <void cv..calcCovarMatrix [ARG Mat samples=, ARG Mat covar=, ARG Mat mean=, ARG int flags=, ARG int ctype=CV_64F]>
FUNC <void cv..PCACompute [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG int maxComponents=0]>
FUNC <void cv..PCACompute [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG double retainedVariance=]>
FUNC <void cv..PCAProject [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG Mat result=]>
FUNC <void cv..PCABackProject [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG Mat result=]>
FUNC <void cv..SVDecomp [ARG Mat src=, ARG Mat w=, ARG Mat u=, ARG Mat vt=, ARG int flags=0]>
FUNC <void cv..SVBackSubst [ARG Mat w=, ARG Mat u=, ARG Mat vt=, ARG Mat rhs=, ARG Mat dst=]>
FUNC <double cv..Mahalanobis [ARG Mat v1=, ARG Mat v2=, ARG Mat icovar=]>
FUNC <void cv..dft [ARG Mat src=, ARG Mat dst=, ARG int flags=0, ARG int nonzeroRows=0]>
FUNC <void cv..idft [ARG Mat src=, ARG Mat dst=, ARG int flags=0, ARG int nonzeroRows=0]>
FUNC <void cv..dct [ARG Mat src=, ARG Mat dst=, ARG int flags=0]>
FUNC <void cv..idct [ARG Mat src=, ARG Mat dst=, ARG int flags=0]>
FUNC <void cv..mulSpectrums [ARG Mat a=, ARG Mat b=, ARG Mat c=, ARG int flags=, ARG bool conjB=false]>
FUNC <int cv..getOptimalDFTSize [ARG int vecsize=]>
FUNC <double cv..kmeans [ARG Mat data=, ARG int K=, ARG Mat bestLabels=, ARG TermCriteria criteria=, ARG int attempts=, ARG int flags=, ARG Mat centers=Mat()]>
FUNC <void cv..randu [ARG Mat dst=, ARG double low=, ARG double high=]>
FUNC <void cv..randn [ARG Mat dst=, ARG double mean=, ARG double stddev=]>
FUNC <void cv..randShuffle [ARG Mat dst=, ARG double iterFactor=1., ARG RNG * rng=0]>
FUNC <void cv..add [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat(), ARG int dtype=-1]>
FUNC <void cv..subtract [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat(), ARG int dtype=-1]>
FUNC <void cv..multiply [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG double scale=1, ARG int dtype=-1]>
FUNC <void cv..divide [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG double scale=1, ARG int dtype=-1]>
FUNC <void cv..divide [ARG double scale=, ARG Mat src2=, ARG Mat dst=, ARG int dtype=-1]>
FUNC <void cv..scaleAdd [ARG Mat src1=, ARG double alpha=, ARG Mat src2=, ARG Mat dst=]>
FUNC <void cv..addWeighted [ARG Mat src1=, ARG double alpha=, ARG Mat src2=, ARG double beta=, ARG double gamma=, ARG Mat dst=, ARG int dtype=-1]>
FUNC <int64 cv..getCPUTickCount []>
FUNC <void cv..setErrorVerbosity [ARG bool verbose=]>
FUNC <int cv..getNumberOfCPUs []>
FUNC <float cv..cubeRoot [ARG float val=]>
FUNC <float cv..fastAtan2 [ARG float y=, ARG float x=]>
FUNC <void cv..convertScaleAbs [ARG Mat src=, ARG Mat dst=, ARG double alpha=1, ARG double beta=0]>
FUNC <void cv..LUT [ARG Mat src=, ARG Mat lut=, ARG Mat dst=]>
FUNC <void cv..hconcat [ARG vector_Mat src=, ARG Mat dst=]>
FUNC <void cv..vconcat [ARG vector_Mat src=, ARG Mat dst=]>
FUNC <void cv..bitwise_and [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat()]>
FUNC <void cv..bitwise_or [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat()]>
FUNC <void cv..bitwise_xor [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat()]>
FUNC <void cv..bitwise_not [ARG Mat src=, ARG Mat dst=, ARG Mat mask=Mat()]>
FUNC <void cv..absdiff [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=]>
FUNC <void cv..inRange [ARG Mat src=, ARG Scalar lowerb=, ARG Scalar upperb=, ARG Mat dst=]>
FUNC <void cv..compare [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG int cmpop=]>
FUNC <void cv..min [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=]>
FUNC <void cv..max [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=]>
FUNC <void cv..sqrt [ARG Mat src=, ARG Mat dst=]>
FUNC <void cv..pow [ARG Mat src=, ARG double power=, ARG Mat dst=]>
FUNC <void cv..exp [ARG Mat src=, ARG Mat dst=]>
FUNC <void cv..log [ARG Mat src=, ARG Mat dst=]>
FUNC <void cv..polarToCart [ARG Mat magnitude=, ARG Mat angle=, ARG Mat x=, ARG Mat y=, ARG bool angleInDegrees=false]>
FUNC <void cv..cartToPolar [ARG Mat x=, ARG Mat y=, ARG Mat magnitude=, ARG Mat angle=, ARG bool angleInDegrees=false]>
FUNC <void cv..phase [ARG Mat x=, ARG Mat y=, ARG Mat angle=, ARG bool angleInDegrees=false]>
FUNC <void cv..magnitude [ARG Mat x=, ARG Mat y=, ARG Mat magnitude=]>
FUNC <bool cv..checkRange [ARG Mat a=, ARG bool quiet=true, ARG  * pos=0, ARG double minVal=-DBL_MAX, ARG double maxVal=DBL_MAX]>
FUNC <void cv..patchNaNs [ARG Mat a=, ARG double val=0]>
FUNC <void cv..gemm [ARG Mat src1=, ARG Mat src2=, ARG double alpha=, ARG Mat src3=, ARG double beta=, ARG Mat dst=, ARG int flags=0]>
FUNC <void cv..mulTransposed [ARG Mat src=, ARG Mat dst=, ARG bool aTa=, ARG Mat delta=Mat(), ARG double scale=1, ARG int dtype=-1]>
FUNC <void cv..transpose [ARG Mat src=, ARG Mat dst=]>
FUNC <void cv..transform [ARG Mat src=, ARG Mat dst=, ARG Mat m=]>
FUNC <Scalar cv..sum [ARG Mat src=]>
FUNC <int cv..countNonZero [ARG Mat src=]>
FUNC <void cv..findNonZero [ARG Mat src=, ARG Mat idx=]>
FUNC <Scalar cv..mean [ARG Mat src=, ARG Mat mask=Mat()]>
FUNC <void cv..meanStdDev [ARG Mat src=, ARG vector_double mean=, ARG vector_double stddev=, ARG Mat mask=Mat()]>
FUNC <double cv..norm [ARG Mat src1=, ARG int normType=NORM_L2, ARG Mat mask=Mat()]>
FUNC <double cv..norm [ARG Mat src1=, ARG Mat src2=, ARG int normType=NORM_L2, ARG Mat mask=Mat()]>
FUNC <void cv..add [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=, ARG Mat mask=Mat(), ARG int dtype=-1]>
CLASS cv..Algorithm : 
FUNC <int cv.Algorithm.getInt [ARG String name=]>
FUNC <double cv.Algorithm.getDouble [ARG String name=]>
FUNC <bool cv.Algorithm.getBool [ARG String name=]>
FUNC <String cv.Algorithm.getString [ARG String name=]>
FUNC <Mat cv.Algorithm.getMat [ARG String name=]>
FUNC <vector_Mat cv.Algorithm.getMatVector [ARG String name=]>
FUNC <Ptr_Algorithm cv.Algorithm.getAlgorithm [ARG String name=]>
SKIP:Ptr_Algorithm getAlgorithm(String name)	 due to RET typePtr_Algorithm
FUNC <void cv.Algorithm.setInt [ARG String name=, ARG int value=]>
FUNC <void cv.Algorithm.setDouble [ARG String name=, ARG double value=]>
FUNC <void cv.Algorithm.setBool [ARG String name=, ARG bool value=]>
FUNC <void cv.Algorithm.setString [ARG String name=, ARG String value=]>
FUNC <void cv.Algorithm.setMat [ARG String name=, ARG Mat value=]>
FUNC <void cv.Algorithm.setMatVector [ARG String name=, ARG vector_Mat value=]>
FUNC <void cv.Algorithm.setAlgorithm [ARG String name=, ARG Ptr_Algorithm value=]>
SKIP:void setAlgorithm(String name, Ptr_Algorithm value)	 due to ARG typePtr_Algorithm/I
FUNC <String cv.Algorithm.paramHelp [ARG String name=]>
FUNC <int cv.Algorithm.paramType [ARG String name=]>
FUNC <void cv.Algorithm.getParams [ARG vector_String names=]>
SKIP:void getParams(vector_String& names)	 due to ARG typevector_String/O
FUNC <void cv.Algorithm.getList [ARG vector_String algorithms=]>
SKIP:static void getList(vector_String& algorithms)	 due to ARG typevector_String/O
FUNC <Ptr_Algorithm cv.Algorithm._create [ARG String name=]>
SKIP:static Ptr_Algorithm _create(String name)	 due to RET typePtr_Algorithm
